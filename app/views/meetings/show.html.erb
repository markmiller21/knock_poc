<div class="container">
  <h2><%= @meeting.meeting_type.capitalize %>, <%= @knocker.display_name %> with <%= @knockee.display_name %></h2>
  <button class="btn btn-success" id="start_call"> Call Now </button>
  <button class="btn btn-success" id="answer"> Answer </button>
  <br/>
  <div id="status"></div>
  <div id="clientStart"></div>
  <br/>
  <video id="incoming" autoplay></video>
  <video id="outgoing" autoplay></video>
</div>


<script>
    $('document').ready(function() {
        $("#signOut").click(function() {
            if (sinchClient) {
                sinchClient.terminate();
            }
        });

        var callClient;
        var call;

        var incomingCallListener = {
            onIncomingCall: function(incomingCall) {
                $("#status").append("<div>Incoming Call</div>");
                call = incomingCall;
                call.addEventListener(callListeners);
            }
        }

        var callListeners = {
            //call is "ringing"
            onCallProgressing: function(call) {
                $("#status").append("<div>Ringing</div>");
            },
            //they picked up the call!
            onCallEstablished: function(call) {
                $("#status").append("<div>Call established</div>");
                $("#outgoing").attr("src", call.outgoingStreamURL);
                $("#incoming").attr("src", call.incomingStreamURL);
            },
            //ended by either party
            onCallEnded: function(call) {
                $("#status").append("<div>Call ended</div>");
                $("#outgoing").attr("src", "");
                $("#incoming").attr("src", "");
                call = null;
            }
        }

        function afterStartSinchClient() {
            // hide auth form
            $("form#authForm").css("display", "none");
            // show logged-in view
            $("div#sinch").css("display", "inline");
            // start listening for incoming calls
            sinchClient.startActiveConnection();
            // define call client (to handle incoming/outgoing calls)
            callClient = sinchClient.getCallClient();
            //initialize media streams, asks for microphone & video permission
            callClient.initStream();
            //what to do when there is an incoming call
            callClient.addEventListener(incomingCallListener);
        }


        sinchClient = new SinchClient({
            applicationKey: "<%=Constants::SINCH_API_KEY%>",
            capabilities: {messaging: true, calling: true, video: true},
            startActiveConnection: true,
            onLogMessage: function(message) {
                console.log(message.message);
            },
        });
        sinchClient.start({"userTicket":"<%=@ticket%>"})
                .then(function() {
                    $("#clientStart").css("display", "inline");
                    afterStartSinchClient();
                });

        $("#start_call").on("click", function (event) {
            event.preventDefault();
            if (!call) {
                //usernameToCall = $("input#usernameToCall").val();
                usernameToCall = "<%= @knockee.email%>";
//                $("div#status").append("<div>Calling " + usernameToCall + "</div>");
                $("div#status").append("<div>Calling <%=@knockee.display_name%></div>");
                call = callClient.callUser(usernameToCall);
                call.addEventListener(callListeners);
            }
        });

        $("#answer").click(function(event) {
            event.preventDefault();
            if (call) {
                $("#status").append("<div>You answered the call</div>");
                call.answer();
            }
        });
    });
</script>